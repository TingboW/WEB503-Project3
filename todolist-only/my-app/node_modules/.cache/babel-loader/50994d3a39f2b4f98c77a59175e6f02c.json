{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport userReducer from '../reducers/userAuthReducer';\nimport userProfileReducer from '../reducers/userProfileReducer';\nimport userUpdateReducer from '../reducers/userUpdateReducer';\nimport usersListReducer from '../reducers/usersListReducer';\nconst middleware = [thunk];\nconst reducer = combineReducers({\n  userLogin: userReducer,\n  userProfile: userProfileReducer,\n  updatedUser: userUpdateReducer,\n  usersList: usersListReducer\n});\n\n//store\n//Initial state\n\n//This is the initial state for all the reducers. NOTE the keys of the reducers above must be the same as the one you will pass as initialstate\n//The key must be the same and secondly look at the way the structure of the data in the store\n\n//Get the user in local storage\n\nconst userAuthFromStorage = localStorage.getItem('userAuthData') ? JSON.parse(localStorage.getItem('userAuthData')) : null;\nconst initialState = {\n  userLogin: {\n    userInfo: userAuthFromStorage\n  }\n};\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","userReducer","userProfileReducer","userUpdateReducer","usersListReducer","middleware","reducer","userLogin","userProfile","updatedUser","usersList","userAuthFromStorage","localStorage","getItem","JSON","parse","initialState","userInfo","store"],"sources":["/Users/tingbowang/Documents/GitHub/WEB503-Project3/my-app/src/redux/store/store.js"],"sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport userReducer from '../reducers/userAuthReducer';\nimport userProfileReducer from '../reducers/userProfileReducer';\nimport userUpdateReducer from '../reducers/userUpdateReducer';\nimport usersListReducer from '../reducers/usersListReducer';\n\nconst middleware = [thunk];\n\nconst reducer = combineReducers({\n  userLogin: userReducer,\n  userProfile: userProfileReducer,\n  updatedUser: userUpdateReducer,\n  usersList: usersListReducer,\n});\n\n//store\n//Initial state\n\n//This is the initial state for all the reducers. NOTE the keys of the reducers above must be the same as the one you will pass as initialstate\n//The key must be the same and secondly look at the way the structure of the data in the store\n\n//Get the user in local storage\n\nconst userAuthFromStorage = localStorage.getItem('userAuthData')\n  ? JSON.parse(localStorage.getItem('userAuthData'))\n  : null;\n\nconst initialState = {\n  userLogin: { userInfo: userAuthFromStorage },\n};\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACrE,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,kBAAkB,MAAM,gCAAgC;AAC/D,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,OAAOC,gBAAgB,MAAM,8BAA8B;AAE3D,MAAMC,UAAU,GAAG,CAACN,KAAK,CAAC;AAE1B,MAAMO,OAAO,GAAGT,eAAe,CAAC;EAC9BU,SAAS,EAAEN,WAAW;EACtBO,WAAW,EAAEN,kBAAkB;EAC/BO,WAAW,EAAEN,iBAAiB;EAC9BO,SAAS,EAAEN;AACb,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA;;AAEA;;AAEA,MAAMO,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,GAC5DC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,GAChD,IAAI;AAER,MAAMG,YAAY,GAAG;EACnBT,SAAS,EAAE;IAAEU,QAAQ,EAAEN;EAAoB;AAC7C,CAAC;AAED,MAAMO,KAAK,GAAGtB,WAAW,CACvBU,OAAO,EACPU,YAAY,EACZhB,mBAAmB,CAACF,eAAe,CAAC,GAAGO,UAAU,CAAC,CAAC,CACpD;AAED,eAAea,KAAK"},"metadata":{},"sourceType":"module"}